import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import type { PayloadAction } from "@reduxjs/toolkit";
import type { Post, PostsState } from "../types";

const API_BASE_URL = "https://jsonplaceholder.typicode.com";

// Async thunk for fetching posts
export const fetchPosts = createAsyncThunk("posts/fetchPosts", async () => {
  const response = await fetch(`${API_BASE_URL}/posts`);
  if (!response.ok) {
    throw new Error("Failed to fetch posts");
  }
  return response.json() as Promise<Post[]>;
});

const initialState: PostsState = {
  posts: [],
  loading: false,
  error: null,
};

const postsSlice = createSlice({
  name: "posts",
  initialState,
  reducers: {
    addPost: (state, action: PayloadAction<Omit<Post, "id">>) => {
      const newPost: Post = {
        ...action.payload,
        id: Date.now(), // Simple ID generation for new posts
      };
      state.posts.unshift(newPost); // Add to the beginning of the array
    },
    clearError: (state) => {
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchPosts.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchPosts.fulfilled, (state, action) => {
        state.loading = false;
        // Preserve locally created posts (those with IDs generated by Date.now())
        const localPosts = state.posts.filter(
          (post) => post.id > 1000000000000
        ); // Date.now() IDs are much larger
        state.posts = [...localPosts, ...action.payload];
      })
      .addCase(fetchPosts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || "Failed to fetch posts";
      });
  },
});

export const { addPost, clearError } = postsSlice.actions;
export default postsSlice.reducer;
